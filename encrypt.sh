#!/bin/bash

# file containing the decrypted save data
INFILE_PATH="save.json"

# file containing metadata generated by the decrypt script
METAFILE_PATH="save.meta"

REQUIRED_COMMANDS=(bash cat read openssl tr jq)

for cmd in "${REQUIRED_COMMANDS[@]}"; do
  if ! command -v "${cmd}" &> /dev/null; then
    echo "command \"${cmd}\" is required by the script but was not found."
    exit 1
  fi
done

if [[ -z "${1}" ]]; then
  OUTFILE_PATH="save.new"
else
  OUTFILE_PATH="${1}"
fi

DATA_IN=$(cat "${INFILE_PATH}")
META_IN=$(cat "${METAFILE_PATH}")

[[ -z "${DATA_IN}" ]] && { echo "Metadata file not found: ${INFILE_PATH}"; exit 1; }
[[ -z "${META_IN}" ]] && { echo "Decrypted save file not found: ${METAFILE_PATH}}."; exit 1; }

# split the metadata into an array
IFS='.'
read -ra ADDR <<< "${META_IN}"

KEY_HEX="${ADDR[0]}"
DATA_TRASH="${ADDR[1]}"
IV="${ADDR[2]}"
IV_HEX=${ADDR[3]};

if [[ -z "${ADDR[0]}" || -z "${ADDR[1]}" || -z "${ADDR[2]}" || -z "${ADDR[3]}" ]]; then
  echo 'Metadata file is not in correct format.'
  exit 1
fi

# compress the JSON just because
DATA_MINIFIED="$(jq -c . <<< "${DATA_IN}")"

# re-encrypt the data using openssl
ENCRYPT="$(openssl enc -aes-256-cbc -nosalt -base64 -K "${KEY_HEX}" -iv "${IV_HEX}" 2> /dev/null <<< "${DATA_MINIFIED}" | tr -d '\n')"

# output the file in the same format the game uses
echo -n "${DATA_TRASH}${ENCRYPT}.${IV}" > "${OUTFILE_PATH}"
echo "Re-encrypted save file to $(realpath "${OUTFILE_PATH}")"
